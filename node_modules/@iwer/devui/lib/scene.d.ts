/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Vector3 } from 'three';
import { TransformHandles } from '@pmndrs/handle';
import { XRDevice } from 'iwer';
export declare const PRIVATE: unique symbol;
type Handedness = 'left' | 'right';
export declare class InputLayer {
    private xrDevice;
    transformHandles: Map<Handedness, TransformHandles>;
    combinedCameraPosition: Vector3;
    private renderer;
    private scene;
    private camera;
    private playerRig;
    private cameraRig;
    private isPointerLocked;
    private vec3;
    private quat;
    private mouseMoveHandler;
    private headsetDefaultPosition;
    private headsetDefaultQuaternion;
    private keyState;
    private forwardHtmlEvents;
    private lastTime;
    constructor(xrDevice: XRDevice);
    lockPointer(): void;
    pointerLockChangeHandler(): void;
    keyDownHandler(event: KeyboardEvent): void;
    keyUpHandler(event: KeyboardEvent): void;
    movePlayerRig(delta: number): void;
    resetDeviceTransforms(): void;
    syncDeviceTransforms(): void;
    renderScene(time: number): void;
    get domElement(): HTMLCanvasElement;
    dispose(): void;
}
export {};
//# sourceMappingURL=scene.d.ts.map