import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { ControlsUI, useInputModeStore } from './components/controls.js';
import { HeaderButton, HeaderButtonsContainer } from './components/styled.js';
import React, { useEffect, useState } from 'react';
import { HeaderUI } from './components/header.js';
import { HeadsetUI } from './components/headset.js';
import { IWERIcon } from './components/icons.js';
import { InputLayer } from './scene.js';
import { StyleSheetManager } from 'styled-components';
import { VERSION } from './version.js';
import { createRoot } from 'react-dom/client';
export class DevUI {
    constructor(xrDevice) {
        this.version = VERSION;
        xrDevice.ipd = 0;
        useInputModeStore.getState().setInputMode(xrDevice.primaryInputMode);
        this.devUIContainer = document.createElement('div');
        this.devUIContainer.style.position = 'fixed';
        this.devUIContainer.style.width = '100vw';
        this.devUIContainer.style.height = '100vh';
        this.devUIContainer.style.top = '50vh';
        this.devUIContainer.style.left = '50vw';
        this.devUIContainer.style.transform = 'translate(-50%, -50%)';
        this.devUIContainer.style.pointerEvents = 'none';
        const devUIShadowRoot = this.devUIContainer.attachShadow({
            mode: 'open',
        });
        this.inputLayer = new InputLayer(xrDevice);
        const root = createRoot(devUIShadowRoot);
        root.render(_jsx(Overlay, { xrDevice: xrDevice, inputLayer: this.inputLayer, shadowRoot: devUIShadowRoot }));
        const installOfferSessionUI = () => {
            const offerSessionUIContainer = document.createElement('div');
            document.body.appendChild(offerSessionUIContainer);
            const offerSessionShadowRoot = offerSessionUIContainer.attachShadow({
                mode: 'open',
            });
            const offerSessionRoot = createRoot(offerSessionShadowRoot);
            offerSessionRoot.render(_jsx(OfferSessionUI, { xrDevice: xrDevice, shadowRoot: offerSessionShadowRoot }));
        };
        if (document.body) {
            installOfferSessionUI();
        }
        else {
            window.onload = installOfferSessionUI;
        }
    }
    render(time) {
        this.inputLayer.renderScene(time);
    }
    get devUICanvas() {
        return this.inputLayer.domElement;
    }
}
const Overlay = ({ xrDevice, inputLayer, shadowRoot, }) => {
    const [pointerLocked, setPointerLocked] = useState(false);
    useEffect(() => {
        const pointerLockChangeHandler = () => {
            const locked = document.pointerLockElement ||
                // @ts-ignore
                document.mozPointerLockElement ||
                // @ts-ignore
                document.webkitPointerLockElement;
            setPointerLocked(!!locked);
        };
        document.addEventListener('pointerlockchange', pointerLockChangeHandler, false);
        document.addEventListener('mozpointerlockchange', pointerLockChangeHandler, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChangeHandler, false);
        return () => {
            document.removeEventListener('pointerlockchange', pointerLockChangeHandler, false);
            document.removeEventListener('mozpointerlockchange', pointerLockChangeHandler, false);
            document.removeEventListener('webkitpointerlockchange', pointerLockChangeHandler, false);
        };
    }, []);
    return (_jsx(StyleSheetManager, { target: shadowRoot, disableCSSOMInjection: true, children: _jsxs("div", { style: {
                width: '100vw',
                height: '100vh',
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'space-between',
                pointerEvents: 'none',
            }, children: [_jsx(HeaderUI, { xrDevice: xrDevice, inputLayer: inputLayer }), _jsx(HeadsetUI, { xrDevice: xrDevice, inputLayer: inputLayer, pointerLocked: pointerLocked }), _jsx(ControlsUI, { xrDevice: xrDevice, inputLayer: inputLayer, pointerLocked: pointerLocked })] }) }));
};
const OfferSessionUI = ({ xrDevice, shadowRoot, }) => {
    const [showOffer, setShowOffer] = React.useState(xrDevice.sessionOffered && !xrDevice.activeSession);
    React.useEffect(() => {
        setInterval(() => {
            setShowOffer(xrDevice.sessionOffered && !xrDevice.activeSession);
        }, 1000);
    }, []);
    return (_jsx(StyleSheetManager, { target: shadowRoot, disableCSSOMInjection: true, children: _jsxs(HeaderButtonsContainer, { style: {
                zIndex: 899,
                position: 'fixed',
                top: showOffer ? '8px' : '-30px',
                display: 'flex',
                flexDirection: 'row',
                alignItems: 'center',
                justifyItems: 'space-between',
                left: '50vw',
                transform: 'translateX(-50%)',
                transition: 'all 0.2s ease-in-out',
                paddingLeft: '5px',
                gap: '3px',
            }, children: [_jsx(IWERIcon, { size: 24 }), _jsx(HeaderButton, { onClick: () => {
                        xrDevice.grantOfferedSession();
                    }, style: {
                        fontSize: '16px',
                    }, children: "Enter XR" })] }) }));
};
export { VERSION };
//# sourceMappingURL=index.js.map