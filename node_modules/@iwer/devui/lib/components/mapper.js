import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Button, ButtonGroup, Colors, ControlButtonStyles } from './styled.js';
import { useEffect, useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { GamepadIcon } from './icons.js';
import { MappedKeyDisplay } from './keys.js';
import { create } from 'zustand';
import { faBan } from '@fortawesome/free-solid-svg-icons';
import { styled } from 'styled-components';
export const DEFAULT_KEYMAP = {
    left: {
        'thumbstick-up': 'KeyW',
        'thumbstick-down': 'KeyS',
        'thumbstick-left': 'KeyA',
        'thumbstick-right': 'KeyD',
        thumbstick: 'KeyR',
        'x-button': 'KeyX',
        'y-button': 'KeyZ',
        trigger: 'KeyQ',
        squeeze: 'KeyE',
        pinch: 'MouseLeft',
        pose: 'KeyF',
    },
    right: {
        'thumbstick-up': 'ArrowUp',
        'thumbstick-down': 'ArrowDown',
        'thumbstick-left': 'ArrowLeft',
        'thumbstick-right': 'ArrowRight',
        thumbstick: 'Slash',
        'a-button': 'Enter',
        'b-button': 'ShiftRight',
        trigger: 'MouseLeft',
        squeeze: 'MouseRight',
        pinch: 'MouseRight',
        pose: 'Backslash',
    },
};
export const useKeyMapStore = create((set) => ({
    keyMap: DEFAULT_KEYMAP,
    bindKey: (handedness, action, keyCode = 'Unmapped') => set((state) => ({
        keyMap: {
            ...state.keyMap,
            [handedness]: {
                ...state.keyMap[handedness],
                [action]: keyCode,
            },
        },
    })),
}));
const Row = styled.div `
	display: flex;
	height: ${ControlButtonStyles.height};
	align-items: center;
	justify-content: space-between;
	margin-bottom: ${ControlButtonStyles.gap};

	&:last-child {
		margin-bottom: 0;
	}
`;
export const ControlsMapper = ({ handedness, actions, }) => {
    const { keyMap, bindKey } = useKeyMapStore();
    const [currentMapping, setCurrentMapping] = useState(null);
    const startMapping = (action) => {
        setCurrentMapping({ action });
    };
    useEffect(() => {
        const handleKeyDown = (event) => {
            if (currentMapping && MappedKeyDisplay[event.code]) {
                bindKey(handedness, currentMapping.action, event.code);
                setCurrentMapping(null);
            }
        };
        const handleMouseDown = (event) => {
            if (currentMapping) {
                const mouseButton = event.button === 0
                    ? 'MouseLeft'
                    : event.button === 2
                        ? 'MouseRight'
                        : null;
                if (mouseButton && MappedKeyDisplay[mouseButton]) {
                    bindKey(handedness, currentMapping.action, mouseButton);
                    setCurrentMapping(null);
                }
            }
        };
        const preventDefaultContextMenu = (event) => {
            event.preventDefault();
        };
        window.addEventListener('keydown', handleKeyDown);
        window.addEventListener('mousedown', handleMouseDown);
        window.addEventListener('contextmenu', preventDefaultContextMenu);
        return () => {
            window.removeEventListener('keydown', handleKeyDown);
            window.removeEventListener('mousedown', handleMouseDown);
            window.removeEventListener('contextmenu', preventDefaultContextMenu);
        };
    }, [currentMapping]);
    return Object.keys(keyMap[handedness])
        .filter((action) => actions.includes(action))
        .map((action) => (_jsxs(Row, { children: [_jsx(GamepadIcon, { buttonName: action === 'up' ? 'thumbstick' : action, handedness: handedness }), _jsxs(ButtonGroup, { "$reverse": false, children: [_jsx(Button, { "$reverse": false, style: {
                            width: '100px',
                            background: currentMapping && currentMapping.action === action
                                ? Colors.gradientLightGreyTranslucent
                                : Colors.gradientGreyTranslucent,
                        }, onClick: () => startMapping(action), onContextMenu: (e) => e.preventDefault(), children: keyMap[handedness][action] }), _jsx(Button, { style: { width: ControlButtonStyles.widthShort }, "$reverse": false, onClick: () => bindKey(handedness, action), onContextMenu: (e) => e.preventDefault(), children: _jsx(FontAwesomeIcon, { icon: faBan }) })] })] }, action)));
};
//# sourceMappingURL=mapper.js.map