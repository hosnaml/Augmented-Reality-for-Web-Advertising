import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { ControlButtonStyles, ControlPanel, FAIcon, PanelHeaderButton, SectionBreak, } from './styled.js';
import { ControlsMapper, useKeyMapStore } from './mapper.js';
import { faCircleXmark, faGear, faHand, faPlug, } from '@fortawesome/free-solid-svg-icons';
import { PinchControl } from './pinch.js';
import { PoseSelector } from './pose.js';
import React from 'react';
import { Vector3Input } from './vec3.js';
export const HandUI = ({ hand, handle, handedness, pointerLocked, }) => {
    const { keyMap } = useKeyMapStore();
    const [connected, setConnected] = React.useState(hand.connected);
    const [settingsOpen, setSettingsOpen] = React.useState(false);
    React.useEffect(() => {
        if (pointerLocked) {
            setSettingsOpen(false);
        }
    }, [pointerLocked]);
    return (_jsxs(ControlPanel, { style: handedness === 'left'
            ? { left: '8px', bottom: '8px' }
            : { right: '8px', bottom: '8px' }, children: [!pointerLocked && (_jsx(_Fragment, { children: _jsxs("div", { style: {
                        display: 'flex',
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                    }, children: [_jsxs("div", { style: {
                                fontSize: '13px',
                                display: 'flex',
                                flexDirection: 'row',
                                alignItems: 'center',
                            }, children: [_jsx(FAIcon, { icon: faHand, "$reverse": handedness === 'left', style: { marginRight: '5px' } }), "Hand\u00A0", _jsxs("span", { style: { fontWeight: 'bold' }, children: ["[", handedness === 'left' ? 'L' : 'R', "]"] })] }), _jsx("div", { style: {
                                display: 'flex',
                                flexDirection: 'row',
                                gap: '1px',
                            }, children: connected ? (_jsxs(_Fragment, { children: [_jsx(PanelHeaderButton, { title: `Click to ${settingsOpen ? 'close' : 'change'} key bindings`, onClick: () => {
                                            setSettingsOpen(!settingsOpen);
                                        }, children: _jsx(FAIcon, { icon: faGear }) }), _jsx(PanelHeaderButton, { title: `Click to disconnect ${handedness} controller`, "$isRed": true, onClick: () => {
                                            hand.connected = false;
                                            setConnected(false);
                                        }, children: _jsx(FAIcon, { icon: faCircleXmark }) })] })) : (_jsx(PanelHeaderButton, { title: `Click to reconnect ${handedness} controller`, onClick: () => {
                                    hand.connected = true;
                                    setConnected(true);
                                }, style: { marginLeft: '5px' }, children: _jsx(FAIcon, { icon: faPlug }) })) })] }) })), connected && !pointerLocked && (_jsxs(_Fragment, { children: [!settingsOpen && (_jsxs(_Fragment, { children: [_jsx(SectionBreak, {}), _jsx(Vector3Input, { vector: handle.position, label: "Position", marginBottom: ControlButtonStyles.gap }), _jsx(Vector3Input, { vector: handle.rotation, label: "Rotation" })] })), _jsx(SectionBreak, {})] })), connected &&
                (settingsOpen ? (_jsx(ControlsMapper, { handedness: handedness, actions: ['pose', 'pinch'] })) : (_jsxs(_Fragment, { children: [_jsx(PoseSelector, { hand: hand, pointerLocked: pointerLocked, mappedKey: keyMap[handedness].pose }), _jsx(PinchControl, { hand: hand, pointerLocked: pointerLocked, mappedKey: keyMap[handedness].pinch })] })))] }, handedness));
};
//# sourceMappingURL=hand.js.map