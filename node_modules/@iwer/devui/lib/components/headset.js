import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Colors, ControlButtonStyles, ControlPanel, FAIcon, InputSuffix, SectionBreak, ValueInput, ValuesContainer, } from './styled.js';
import { faStreetView, faVideo, faVrCardboard, } from '@fortawesome/free-solid-svg-icons';
import React from 'react';
import { Vector3Input } from './vec3.js';
import { styled } from 'styled-components';
const HeadsetOptionContainer = styled.div `
	width: 100%;
	display: flex;
	flex-direction: row;
	justify-content: space-between;
	align-items: center;
	margin-top: ${ControlButtonStyles.gap};
	font-size: 12px;
`;
const RangeSelector = styled.input.attrs({ type: 'range' }) `
	-webkit-appearance: none;
	appearance: none;
	background: ${Colors.gradientGrey};
	border: 1px solid transparent;
	height: 25px;
	color: ${Colors.textWhite};
	width: ${ControlButtonStyles.widthLong};
	cursor: pointer;
	margin: 0;
	border-radius: 5px;
	padding: 0 10px 0 5px;
	box-sizing: border-box;
	font-size: 10px;

	&::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 8px;
		height: 25px;
		background-color: ${Colors.textWhite};
		border-radius: ${ControlButtonStyles.radiusMiddle};
	}

	&::-moz-range-thumb {
		width: 8px;
		height: 25px;
		background-color: ${Colors.textWhite};
		border-radius: ${ControlButtonStyles.radiusMiddle};
	}

	&::-ms-thumb {
		width: 8px;
		height: 25px;
		background-color: ${Colors.textWhite};
		border-radius: ${ControlButtonStyles.radiusMiddle};
	}
`;
export const HeadsetUI = ({ xrDevice, inputLayer, pointerLocked, }) => {
    const [fovy, setFovy] = React.useState(xrDevice.fovy);
    return (_jsxs(ControlPanel, { style: { left: '8px', top: '8px' }, children: [_jsxs("div", { style: {
                    display: 'flex',
                    flexDirection: 'row',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    height: '20px',
                }, children: [_jsxs("div", { style: {
                            fontSize: '13px',
                            display: 'flex',
                            flexDirection: 'row',
                            alignItems: 'center',
                            justifyItems: 'start',
                        }, children: [_jsx(FAIcon, { icon: faVrCardboard, style: { marginRight: '5px' } }), _jsx("div", { style: { alignItems: 'end' }, children: xrDevice.name })] }), _jsx("div", { style: {
                            display: 'flex',
                            flexDirection: 'row',
                            gap: '1px',
                        } })] }), _jsx(SectionBreak, {}), _jsx(Vector3Input, { vector: inputLayer.combinedCameraPosition, icon: faStreetView }), !pointerLocked && (_jsxs(HeadsetOptionContainer, { children: [_jsx(FAIcon, { icon: faVideo, style: { marginRight: '5px' } }), _jsxs(ValuesContainer, { children: [_jsxs("div", { style: {
                                    position: 'relative',
                                    display: 'inline-block',
                                    height: '25px',
                                }, children: [_jsx(ValueInput, { type: "text", value: ((fovy / Math.PI) * 180).toFixed(0) + 'Â°', readOnly: true, style: { width: '73px' } }), _jsx(InputSuffix, { children: "FOV-Y" })] }), _jsx("div", { style: {
                                    position: 'relative',
                                    display: 'inline-block',
                                }, children: _jsx(RangeSelector, { value: fovy, onChange: (e) => {
                                        const value = Number(e.target.value);
                                        setFovy(value);
                                        xrDevice.fovy = value;
                                    }, min: Math.PI / 6, max: Math.PI / 1.5, step: Math.PI / 48, style: { width: '80px' } }) })] })] }))] }));
};
//# sourceMappingURL=headset.js.map