import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { FAIcon, InputSuffix, ValueInput, ValuesContainer } from './styled.js';
import { useEffect, useRef, useState } from 'react';
import { styled } from 'styled-components';
export function round(number, decimalPlaces) {
    const factor = Math.pow(10, decimalPlaces);
    return Math.round(number * factor) / factor;
}
const Vector3Container = styled.div `
	width: 100%;
	display: flex;
	flex-direction: row;
	justify-content: space-between;
	align-items: center;
	margin: 0;
	font-size: 12px;
`;
export const Vector3Input = ({ vector, label = '', icon, multiplier = 1, precision = 2, onValidInput = () => { }, marginBottom = '0', }) => {
    const [displayValues, setDisplayValues] = useState({
        x: (vector.x / multiplier).toFixed(precision),
        y: (vector.y / multiplier).toFixed(precision),
        z: (vector.z / multiplier).toFixed(precision),
    });
    const actualValuesRef = useRef({
        x: round(vector.x / multiplier, precision),
        y: round(vector.y / multiplier, precision),
        z: round(vector.z / multiplier, precision),
    });
    const animationFrameId = useRef(null);
    // Sync display values with actual values (optimized)
    const syncValues = () => {
        const currentActualValues = {
            x: round(vector.x / multiplier, precision),
            y: round(vector.y / multiplier, precision),
            z: round(vector.z / multiplier, precision),
        };
        const { x, y, z } = actualValuesRef.current;
        // Only update state if actual values have changed
        if (currentActualValues.x !== x ||
            currentActualValues.y !== y ||
            currentActualValues.z !== z) {
            actualValuesRef.current = currentActualValues;
            setDisplayValues({
                x: currentActualValues.x.toFixed(precision),
                y: currentActualValues.y.toFixed(precision),
                z: currentActualValues.z.toFixed(precision),
            });
        }
        // Schedule the next frame
        animationFrameId.current = requestAnimationFrame(syncValues);
    };
    useEffect(() => {
        // Start the synchronization loop
        animationFrameId.current = requestAnimationFrame(syncValues);
        return () => {
            // Cleanup the animation frame on unmount
            if (animationFrameId.current) {
                cancelAnimationFrame(animationFrameId.current);
            }
        };
    }, [vector, multiplier, precision]);
    // Handle user input changes
    const handleInputChange = (axis) => (event) => {
        const newValue = event.target.value;
        const parsedValue = parseFloat(newValue);
        // Update display values immediately
        setDisplayValues((prev) => ({ ...prev, [axis]: newValue }));
        // If valid, update the actual values and the vector
        if (!isNaN(parsedValue)) {
            actualValuesRef.current[axis] = parsedValue;
            vector[axis] = parsedValue * multiplier;
            onValidInput();
        }
    };
    return (_jsxs(Vector3Container, { style: { marginBottom }, children: [icon ? (_jsx(FAIcon, { icon: icon, style: { marginRight: '5px' } })) : (_jsx("span", { style: { marginRight: '5px' }, children: label })), _jsx(ValuesContainer, { children: ['x', 'y', 'z'].map((axis) => (_jsxs("div", { style: {
                        position: 'relative',
                        display: 'inline-block',
                        height: '25px',
                    }, children: [_jsx(ValueInput, { value: displayValues[axis], onChange: handleInputChange(axis), className: parseFloat(displayValues[axis]) !==
                                actualValuesRef.current[axis]
                                ? 'invalid'
                                : undefined }), _jsx(InputSuffix, { children: axis.toUpperCase() })] }, `${label}-${axis}`))) })] }));
};
//# sourceMappingURL=vec3.js.map