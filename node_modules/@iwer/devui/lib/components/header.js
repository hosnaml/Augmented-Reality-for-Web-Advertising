import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BoxIcon, IWERIcon, MeshIcon, PlaneIcon } from './icons.js';
import { Button, Colors, ControlButtonStyles, ControlPanel, FAIcon, HeaderButton, HeaderButtonsContainer, PanelHeaderButton, SectionBreak, } from './styled.js';
import { faBug, faCirclePlay, faCircleXmark, faGamepad, faHand, faPersonShelter, faRightFromBracket, faRotateLeft, } from '@fortawesome/free-solid-svg-icons';
import React from 'react';
import { create } from 'zustand';
import { styled } from 'styled-components';
import { useInputModeStore } from './controls.js';
const VersionTableCol1 = styled.td `
	text-align: right;
	color: ${Colors.textWhite};
	padding: 0 8px 0 0;
	font-weight: bold;
`;
const VersionTableCol2 = styled.td `
	text-align: left;
	color: ${Colors.textGrey};
	padding: 0;
`;
const envNames = [
    'meeting_room',
    'living_room',
    'music_room',
    'office_large',
    'office_small',
];
export const useHeaderStateStore = create((set) => ({
    infoPanelOpen: false,
    envDropDownOpen: false,
    setInfoPanelOpen: (open) => set(() => ({ infoPanelOpen: open })),
    setEnvDropDownOpen: (open) => set(() => ({ envDropDownOpen: open })),
}));
function underscoreToTitleCase(str) {
    return str
        .split('_')
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
}
export const HeaderUI = ({ xrDevice, inputLayer }) => {
    var _a, _b, _c;
    const [planesVisible, setPlanesVisible] = React.useState(Boolean((_a = xrDevice.sem) === null || _a === void 0 ? void 0 : _a.planesVisible));
    const [boxesVisible, setBoxesVisible] = React.useState(Boolean((_b = xrDevice.sem) === null || _b === void 0 ? void 0 : _b.boundingBoxesVisible));
    const [meshesVisible, setMeshesVisible] = React.useState(Boolean((_c = xrDevice.sem) === null || _c === void 0 ? void 0 : _c.meshesVisible));
    const { inputMode, setInputMode } = useInputModeStore();
    const { infoPanelOpen, setInfoPanelOpen, envDropDownOpen, setEnvDropDownOpen, } = useHeaderStateStore();
    return (_jsxs("div", { style: {
            display: 'flex',
            justifyContent: 'center',
            flexDirection: 'row',
            alignItems: 'center',
            gap: '6px',
            padding: '8px',
        }, children: [_jsx(HeaderButtonsContainer, { children: _jsxs("div", { style: {
                        display: 'flex',
                        flexDirection: 'row',
                        gap: '1px',
                    }, children: [_jsx(HeaderButton, { title: "Click to reset device transforms", onClick: () => {
                                inputLayer.resetDeviceTransforms();
                            }, children: _jsx(FAIcon, { icon: faRotateLeft, "$size": 16 }) }), _jsx(HeaderButton, { title: "Click to activate play mode", onClick: () => {
                                inputLayer.lockPointer();
                                setEnvDropDownOpen(false);
                                setInfoPanelOpen(false);
                            }, children: _jsx(FAIcon, { icon: faCirclePlay, "$size": 16 }) }), _jsx(HeaderButton, { title: "Click to toggle input mode", onClick: () => {
                                if (inputMode === 'controller') {
                                    setInputMode('hand');
                                    xrDevice.primaryInputMode = 'hand';
                                }
                                else {
                                    setInputMode('controller');
                                    xrDevice.primaryInputMode = 'controller';
                                }
                            }, children: _jsx(FAIcon, { icon: inputMode === 'controller' ? faGamepad : faHand, "$size": 16 }) }), xrDevice.sem && (_jsxs(_Fragment, { children: [_jsx(SectionBreak, { "$horizontal": false }), _jsx(HeaderButton, { title: "Click to select/change emulated environment", onClick: () => setEnvDropDownOpen(!envDropDownOpen), children: _jsx(FAIcon, { icon: faPersonShelter, "$size": 16 }) }), _jsx(HeaderButton, { title: "Click to toggle visibility of planes", onClick: () => {
                                        xrDevice.sem.planesVisible = !planesVisible;
                                        setPlanesVisible(!planesVisible);
                                    }, children: _jsx(PlaneIcon, { size: 16, color: planesVisible ? Colors.textWhite : Colors.textGrey }) }), _jsx(HeaderButton, { title: "Click to toggle visibility of bounding boxes", onClick: () => {
                                        xrDevice.sem.boundingBoxesVisible = !boxesVisible;
                                        setBoxesVisible(!boxesVisible);
                                    }, children: _jsx(BoxIcon, { size: 16, color: boxesVisible ? Colors.textWhite : Colors.textGrey }) }), _jsx(HeaderButton, { title: "Click to toggle visibility of meshes", onClick: () => {
                                        xrDevice.sem.meshesVisible = !meshesVisible;
                                        setMeshesVisible(!meshesVisible);
                                    }, children: _jsx(MeshIcon, { size: 16, color: meshesVisible ? Colors.textWhite : Colors.textGrey }) })] })), _jsx(SectionBreak, { "$horizontal": false }), _jsx(HeaderButton, { title: "Click to exit XR session", onClick: () => {
                                const xrSession = xrDevice.activeSession;
                                xrSession === null || xrSession === void 0 ? void 0 : xrSession.end();
                            }, children: _jsx(FAIcon, { icon: faRightFromBracket, "$size": 16 }) })] }) }), _jsx(HeaderButtonsContainer, { children: _jsxs("div", { style: {
                        display: 'flex',
                        flexDirection: 'row',
                        gap: '1px',
                    }, children: [_jsx(HeaderButton, { title: "About IWER", onClick: () => {
                                setInfoPanelOpen(!infoPanelOpen);
                            }, children: _jsx(IWERIcon, { size: 16 }) }), _jsx(HeaderButton, { title: "Report issues", onClick: () => {
                                window.open('https://github.com/meta-quest/immersive-web-emulation-runtime/issues', '_blank');
                            }, children: _jsx(FAIcon, { icon: faBug, "$size": 16 }) })] }) }), infoPanelOpen && (_jsxs(ControlPanel, { style: {
                    top: '50vh',
                    left: '50vw',
                    transform: 'translate(-50%, -50%)',
                    maxWidth: '240px',
                    gap: '4px',
                }, children: [_jsx("div", { style: { display: 'flex', justifyContent: 'end' }, children: _jsx(PanelHeaderButton, { "$isRed": true, onClick: () => {
                                setInfoPanelOpen(false);
                            }, children: _jsx(FAIcon, { icon: faCircleXmark }) }) }), _jsx("div", { style: { display: 'flex', justifyContent: 'center' }, children: _jsx(IWERIcon, { size: 100 }) }), _jsxs("p", { style: { textAlign: 'center', padding: '0 5px', margin: '0' }, children: [_jsx("b", { children: "Immersive Web Emulation Runtime" }), " (IWER) is a free, open-source WebXR developer tool created by Meta Platforms, Inc."] }), _jsx("table", { style: {
                            width: '100%',
                            borderCollapse: 'collapse',
                            display: 'flex',
                            justifyContent: 'center',
                            fontSize: '12px',
                            padding: '8px',
                        }, children: _jsxs("tbody", { children: [_jsxs("tr", { children: [_jsx(VersionTableCol1, { children: "IWER" }), _jsxs(VersionTableCol2, { children: ["v", xrDevice.version] })] }), _jsxs("tr", { children: [_jsx(VersionTableCol1, { children: "DevUI" }), _jsxs(VersionTableCol2, { children: ["v", xrDevice.devui.version] })] }), xrDevice.sem && (_jsxs("tr", { children: [_jsx(VersionTableCol1, { children: "SEM" }), _jsxs(VersionTableCol2, { children: ["v", xrDevice.sem.version] })] }))] }) }), _jsx(Button, { style: {
                            borderRadius: ControlButtonStyles.radiusSolo,
                        }, onClick: () => {
                            window.open('https://github.com/meta-quest/immersive-web-emulation-runtime/blob/main/LICENSE', '_blank');
                        }, children: "MIT License" }), _jsx(Button, { style: {
                            borderRadius: ControlButtonStyles.radiusSolo,
                        }, onClick: () => {
                            window.open('https://github.com/meta-quest/immersive-web-emulation-runtime', '_blank');
                        }, children: "View Source on GitHub" })] })), envDropDownOpen && (_jsx(ControlPanel, { style: {
                    position: 'absolute',
                    top: '40px',
                }, children: envNames.map((name) => (_jsx("div", { children: _jsx(HeaderButton, { style: {
                            fontSize: '12px',
                            width: '100%',
                            justifyContent: 'start',
                            borderRadius: '8px',
                        }, onClick: () => {
                            // @ts-ignore
                            xrDevice.sem.loadDefaultEnvironment(name);
                        }, children: underscoreToTitleCase(name) }) }, name))) }))] }));
};
//# sourceMappingURL=header.js.map