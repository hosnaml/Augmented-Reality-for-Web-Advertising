/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { BoxGeometry, Vector3 } from 'three';
import { SpatialEntityComponent, SpatialEntityComponentType, } from './component.js';
export class Bounded3DComponent extends SpatialEntityComponent {
    constructor(spatialEntity, initData) {
        super(spatialEntity);
        this._offset = new Vector3();
        this._extent = new Vector3();
        this.type = SpatialEntityComponentType.Bounded3D;
        const { offset, extent } = initData;
        this._offset.copy(offset);
        this._extent.copy(extent);
        this.buildGeometry();
    }
    buildGeometry() {
        var _a;
        const geometry = new BoxGeometry(this._extent.x, this._extent.y, this._extent.z);
        geometry.translate(this._offset.x + this._extent.x / 2, this._offset.y + this._extent.y / 2, this._offset.z + this._extent.z / 2);
        (_a = this._spatialEntity.geometry) === null || _a === void 0 ? void 0 : _a.dispose();
        this._spatialEntity.geometry = geometry;
    }
    get offset() {
        return this._offset;
    }
    get extent() {
        return this._extent;
    }
    get initData() {
        return {
            offset: this.offset,
            extent: this.extent,
        };
    }
    toJSON() {
        return {
            bounded3D: this.initData,
        };
    }
}
//# sourceMappingURL=bounded3d.js.map