import { PlaneGeometry, Vector2 } from 'three';
import { SpatialEntityComponent, SpatialEntityComponentType, } from './component.js';
export class Bounded2DComponent extends SpatialEntityComponent {
    constructor(spatialEntity, initData) {
        super(spatialEntity);
        this._offset = new Vector2();
        this._extent = new Vector2();
        this.type = SpatialEntityComponentType.Bounded2D;
        const { offset, extent } = initData;
        this._offset.set(offset.x, offset.y);
        this._extent.set(extent.width, extent.height);
        this.buildGeometry();
    }
    buildGeometry() {
        var _a;
        const geometry = new PlaneGeometry(this._extent.x, this._extent.y);
        geometry.translate(this._offset.x + this._extent.x / 2, this._offset.y + this._extent.y / 2, 0);
        geometry.rotateX(Math.PI / 2);
        (_a = this._spatialEntity.geometry) === null || _a === void 0 ? void 0 : _a.dispose();
        this._spatialEntity.geometry = geometry;
    }
    get offset() {
        return this._offset;
    }
    get extent() {
        return this._extent;
    }
    get initData() {
        return {
            offset: this.offset,
            extent: this.extent,
        };
    }
    get pbData() {
        return {
            offset: { x: this._offset.x, y: this._offset.y },
            extent: { width: this._extent.x, height: this._extent.y },
        };
    }
}
//# sourceMappingURL=bounded2d.js.map